services:
  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
      - ./config/loki/loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - lgtmo

  # Grafana - Visualization Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - lgtmo
    depends_on:
      - loki
      - tempo
      - mimir
      - prometheus

  # Tempo - Distributed Tracing
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    user: root
    ports:
      - "3200:3200" # Tempo HTTP
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "9411:9411" # Zipkin
      - "14268:14268" # Jaeger ingest
    command: -config.file=/etc/tempo/tempo-config.yaml
    volumes:
      - tempo-data:/var/tempo
      - ./config/tempo/tempo-config.yaml:/etc/tempo/tempo-config.yaml
    networks:
      - lgtmo

  # Mimir - Scalable Metrics Storage
  mimir:
    image: grafana/mimir:latest
    container_name: mimir
    ports:
      - "9009:9009"
    command: -config.file=/etc/mimir/mimir-config.yaml
    volumes:
      - mimir-data:/data
      - ./config/mimir/mimir-config.yaml:/etc/mimir/mimir-config.yaml
    networks:
      - lgtmo

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-remote-write-receiver"
    volumes:
      - prometheus-data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - lgtmo

  # OpenTelemetry Collector (System monitoring)
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    ports:
      - "4316:4317" # OTLP gRPC receiver
      - "4319:4318" # OTLP HTTP receiver
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - lgtmo
    depends_on:
      - loki
      - tempo
      - prometheus

  # OpenTelemetry Collector for Tenant A (ACME Corp)
  otel-collector-tenant-a:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector-tenant-a
    ports:
      - "4320:4317" # OTLP gRPC receiver
      - "4321:4318" # OTLP HTTP receiver
      - "8890:8889" # Prometheus exporter metrics
      - "13134:13133" # health_check extension
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel/otel-collector-tenant-a.yaml:/etc/otel-collector-config.yaml
    networks:
      - lgtmo
    depends_on:
      - loki
      - tempo
      - prometheus

  # OpenTelemetry Collector for Tenant B (Globex Inc)
  otel-collector-tenant-b:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector-tenant-b
    ports:
      - "4322:4317" # OTLP gRPC receiver
      - "4323:4318" # OTLP HTTP receiver
      - "8891:8889" # Prometheus exporter metrics
      - "13135:13133" # health_check extension
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel/otel-collector-tenant-b.yaml:/etc/otel-collector-config.yaml
    networks:
      - lgtmo
    depends_on:
      - loki
      - tempo
      - prometheus

  # Demo Application for Tenant A (ACME Corporation)
  demo-app-tenant-a:
    build:
      context: ./demo-app
      dockerfile: Dockerfile
    container_name: demo-app-tenant-a
    ports:
      - "8080:8080"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector-tenant-a:4317
      - OTEL_SERVICE_NAME=acme-shop
      - TENANT_ID=tenant-a
      - TENANT_NAME=ACME Corporation
    networks:
      - lgtmo
    depends_on:
      - otel-collector-tenant-a

  # Demo Application for Tenant B (Globex Inc)
  demo-app-tenant-b:
    build:
      context: ./demo-app
      dockerfile: Dockerfile
    container_name: demo-app-tenant-b
    ports:
      - "8081:8080"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector-tenant-b:4317
      - OTEL_SERVICE_NAME=globex-api
      - TENANT_ID=tenant-b
      - TENANT_NAME=Globex Inc
    networks:
      - lgtmo
    depends_on:
      - otel-collector-tenant-b

networks:
  lgtmo:
    driver: bridge

volumes:
  grafana-data:
  loki-data:
  tempo-data:
  mimir-data:
  prometheus-data:
